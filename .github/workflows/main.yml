name: Deploy to Databricks 

on: 
  push: 
    branches: 
      - main 

jobs: 
  deploy_dev: 
    runs-on: ubuntu-latest 

    steps: 
    - name: Checkout code 
      uses: actions/checkout@v2 

    - name: Install Databricks CLI and dependencies 
      run: | 
        pip install databricks-cli 
        pip install urllib3==1.26.6 chardet==3.0.4 

    - name: Configure Databricks CLI 
      env: 
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }} 
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }} 
      run: | 
        cat <<EOF | databricks configure --token 
        $DATABRICKS_HOST 
        $DATABRICKS_TOKEN 
        EOF 

    - name: Validate Databricks CLI Configuration 
      run: databricks workspace list 
      
    - name: Load dev environment variables
      id: load-env
      run: |
          echo "CONTAINER_NAME=$(cat .github/environments/dev.yml | grep CONTAINER_NAME | cut -d ' ' -f 2-)" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$(cat .github/environments/dev.yml | grep STORAGE_ACCOUNT_NAME | cut -d ' ' -f 2-)" >> $GITHUB_ENV

    - name: Replace tokens in notebooks
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const replaceInFiles = (dir, tokenPrefix, tokenSuffix) => {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                replaceInFiles(filePath, tokenPrefix, tokenSuffix);
              } else {
                let content = fs.readFileSync(filePath, 'utf8');
                content = content.replace(new RegExp(`\\${tokenPrefix}CONTAINER_NAME\\${tokenSuffix}`, 'g'), process.env.CONTAINER_NAME);
                content = content.replace(new RegExp(`\\${tokenPrefix}STORAGE_ACCOUNT_NAME\\${tokenSuffix}`, 'g'), process.env.STORAGE_ACCOUNT_NAME);
                fs.writeFileSync(filePath, content, 'utf8');
              }
            });
          };
          replaceInFiles('release', '{', '}');

    - name: Sync to Databricks 
      run: databricks workspace import_dir --overwrite release /Workspace/Users/kalpesh.azure.subscription@gmail.com/release 

  deploy_prod: 
    runs-on: ubuntu-latest 
    needs: deploy_dev 

    steps: 
    - name: Checkout code 
      uses: actions/checkout@v2 

    - name: Install Databricks CLI and dependencies 
      run: | 
        pip install databricks-cli 
        pip install urllib3==1.26.6 chardet==3.0.4 

    - name: Configure Databricks CLI 
      env: 
        DATABRICKS_HOST: ${{ secrets.PROD_DATABRICKS_HOST }} 
        DATABRICKS_TOKEN: ${{ secrets.PROD_DATABRICKS_TOKEN }} 
      run: | 
        cat <<EOF | databricks configure --token 
        $DATABRICKS_HOST 
        $DATABRICKS_TOKEN 
        EOF 

    - name: Validate Databricks CLI Configuration for Production 
      run: databricks workspace list 

    - name: Load prod environment variables
      id: load-env
      run: |
          echo "CONTAINER_NAME=$(cat .github/environments/prod.yml | grep CONTAINER_NAME | cut -d ' ' -f 2-)" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$(cat .github/environments/prod.yml | grep STORAGE_ACCOUNT_NAME | cut -d ' ' -f 2-)" >> $GITHUB_ENV

    - name: Replace tokens in notebooks
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const replaceInFiles = (dir, tokenPrefix, tokenSuffix) => {
            const files = fs.readdirSync(dir);
            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                replaceInFiles(filePath, tokenPrefix, tokenSuffix);
              } else {
                let content = fs.readFileSync(filePath, 'utf8');
                content = content.replace(new RegExp(`\\${tokenPrefix}CONTAINER_NAME\\${tokenSuffix}`, 'g'), process.env.CONTAINER_NAME);
                content = content.replace(new RegExp(`\\${tokenPrefix}STORAGE_ACCOUNT_NAME\\${tokenSuffix}`, 'g'), process.env.STORAGE_ACCOUNT_NAME);
                fs.writeFileSync(filePath, content, 'utf8');
              }
            });
          };
          replaceInFiles('prod_release', '{', '}');

    - name: Sync to Databricks Production 
      run: databricks workspace import_dir --overwrite prod_release /Workspace/Users/kalpesh.azure.subscription@gmail.com/prod_release
